<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
$idName = $this->getIdName() ? $this->getIdName() : 'product_categories';
$nameName = $this->getNameName() ? $this->getNameName() : 'category_ids';
$idsString = $this->getForcedIdsString() ? $this->getForcedIdsString() : $this->getIdsString();
?>
<input type="hidden" name="<?php echo $nameName?>" id="<?php echo $idName?>" value="<?php echo $idsString ?>">
<div id="<?php echo $idName?>_tree" class="tree"></div>
<?php if($this->getRootNode() && $this->getRootNode()->hasChildren()): ?>
<script type="text/javascript">
window['bildCategoryTree<?php echo $idName?>'] = function (parent, config){
    if (!config) return null;

    if (parent && config && config.length){
        for (var i = 0; i < config.length; i++){
            config[i].uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            var _node = Object.clone(config[i]);
            if (_node.children && !_node.children.length) {
                delete(_node.children);
                node = new Ext.tree.AsyncTreeNode(_node);

            } else {
                node = new Ext.tree.TreeNode(config[i]);
            }
            parent.appendChild(node);
            node.loader = node.getOwnerTree().loader;
            if(config[i].children){
                window['bildCategoryTree<?php echo $idName?>'](node, config[i].children);
            }
        }
    }
}

window['categoryClick<?php echo $idName?>'] = function (node, e){
    if (node.disabled) {
        return;
    }
    node.getUI().check(!node.getUI().checked());
    varienElementMethods.setHasChanges(Event.element(e), e);
};
window['categoryAdd<?php echo $idName?>'] = function (id) {
    var ids = $('<?php echo $idName?>').value.split(',');
    ids.push(id);
    $('<?php echo $idName?>').value = ids.join(',');
}
window['categoryRemove<?php echo $idName?>'] = function (id) {
    var ids = $('<?php echo $idName?>').value.split(',');
    // bug #7654 fixed
    while (-1 != ids.indexOf(id)) {
        ids.splice(ids.indexOf(id), 1);
    }
    $('<?php echo $idName?>').value = ids.join(',');
}

window['categoryBootstrap<?php echo $idName?>'] = function() {
    var categoryLoader = new Ext.tree.TreeLoader({
       dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
    });

    categoryLoader.createNode = function(config) {
        config.uiProvider = Ext.tree.CheckboxNodeUI;
        var node;
        if (config.children && !config.children.length) {
            delete(config.children);
            node = new Ext.tree.AsyncTreeNode(config);

        } else {
            node = new Ext.tree.TreeNode(config);
        }
        return node;
    };

    categoryLoader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.category = node.attributes.id;
    });

    categoryLoader.on("load", function(treeLoader, node, config) {
        varienWindowOnload();
    });

    var tree = new Ext.tree.TreePanel('<?php echo $idName?>_tree', {
        animate:true,
        loader: categoryLoader,
        enableDD:false,
        containerScroll: true,
        rootUIProvider: Ext.tree.CheckboxNodeUI,
        selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
        rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
    });

    tree.on('check', function(node) {
        if(node.attributes.checked) {
            window['categoryAdd<?php echo $idName?>'](node.id);
        } else {
            window['categoryRemove<?php echo $idName?>'](node.id);
        }
        varienElementMethods.setHasChanges(node.getUI().checkbox);
    }, tree);

    // set the root node
    var root = new Ext.tree.TreeNode({
        text: '<?php echo $this->jsQuoteEscape($this->getRootNode()->getName()) ?>',
        draggable:false,
        checked:'<?php echo $this->getRootNode()->getChecked() ?>',
        id:'<?php echo $this->getRootNode()->getId() ?>',
        disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
        uiProvider: Ext.tree.CheckboxNodeUI
    });

    tree.setRootNode(root);
    window['bildCategoryTree<?php echo $idName?>'](root, <?php echo $this->getTreeJson() ?>);
    tree.addListener('click', window['categoryClick<?php echo $idName?>'].createDelegate(this));

    // render the tree
    tree.render();
    root.expand();
    //tree.expandAll();
};

<?php if (1||$this->getUseDeferToBootstrap()): ?>
window['categoryBootstrap<?php echo $idName?>'].defer();
<?php else: ?>
Ext.EventManager.onDocumentReady(window['categoryBootstrap<?php echo $idName?>']);
<?php endif ?>
</script>
<?php endif; ?>
